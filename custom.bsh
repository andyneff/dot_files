#!/usr/bin/env false bash

REPO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

source "${DOT_CORE_DIR}/external/vsi_common/linux/web_tools.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/requirements.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/versions.bsh"
source "${DOT_CORE_DIR}/external/vsi_common/linux/compat.bsh"

function expand_tilde()
{
  sed "s|~|${HOME}|g" "${1}" > "${2}"
}

function setup()
{
  # Bashrc
  add_if ~/.bashrc '\.personal\.bashrc' \
'if [ -r ~/.personal.bashrc ]; then
  . ~/.personal.bashrc
fi'

  # Bash_profile - Most OSes have this by default, macOS does not
  add_if ~/.bash_profile '~/.bashrc' \
'if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi'

  # ssh/config
  add_after_if ~/.ssh/config "Match all" "  Include personal.config"

  openssh_version
  if [ "${ssh_version[0]}" -ge "8" ]; then
    add_after_if ~/.ssh/config "Match all" "  Include openssh_8.config"
  fi

  if [ "${OS-}" = "Windows_NT" ]; then
    add_after_if ~/.ssh/config "Match all" "  Include windows.config"
  else
    add_after_if ~/.ssh/config "Match all" "  Include linux.config"
  fi

  # Special permissions
  chmod 600 ~/.ssh/config
  chmod 600 "${REPO_DIR}/files/.ssh/personal.config"
  chmod 600 "${REPO_DIR}/files/.ssh/openssh_8.config"
  chmod 600 "${REPO_DIR}/files/.ssh/windows.config"
  chmod 600 "${REPO_DIR}/files/.ssh/linux.config"

  # git/config
  add_after_if ~/.gitconfig "[include]" "  path = ~/.personal.gitconfig"

  if meet_requirements "$(git_version)" '>=2.11.4'; then
    add_after_if ~/.gitconfig "[include]" "  path = ~/.2.11.4.gitconfig"
  fi

  if meet_requirements "$(git_version)" '>=2.15'; then
    add_after_if ~/.gitconfig "[include]" "  path = ~/.2.15.gitconfig"
  fi

  if [ "${OS-}" = "Windows_NT" ]; then
    add_after_if ~/.gitconfig "[include]" "  path = ~/.windows.gitconfig"
  fi

  # # .docker/config
  # if [ "${OS-}" = "Windows_NT" ]; then
  #   backup_and_replace ~/.docker/config_windows.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  # elif [ -n "${WSL_DISTRO_NAME+set}" ]; then
  #   backup_and_replace ~/.docker/config_wsl.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  # elif [[ ${OSTYPE-} = darwin* ]]; then
  #   backup_and_replace ~/.docker/config_macos.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  # else
  #   backup_and_replace ~/.docker/config_linux.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  # fi

  # Other

  if [ "${DOT_OS-}" = "linux" ] && [ -z "${WSLENV+set}" ] && [ ! -e ~/bin/docker-credential-secretservice ] && [ ! -e ~/bin/docker-credential-pass ]; then
    # Run level 3 is headless, no graphics. The simple existence of this executable will affect how docker login works
    # By default, Docker looks for the native binary on each of the platforms, i.e.
    # "osxkeychain" on macOS, "wincred" on windows, and "pass" on Linux. A special
    # case is that on Linux, Docker will fall back to the "secretservice" binary if
    # it cannot find the "pass" binary. If none of these binaries are present, it
    # stores the credentials (i.e. password) in base64 encoding in the config files
    # described above.
    # if [[ "$(runlevel 2>/dev/null || /sbin/runlevel 2>/dev/null || /usr/sbin/runlevel)" =~ 5 ]]; then
    download_to_file https://github.com/docker/docker-credential-helpers/releases/download/v0.6.4/docker-credential-secretservice-v0.6.4-amd64.tar.gz \
                     ~/bin/docker-credential-secretservice.tgz
    download_to_file https://github.com/docker/docker-credential-helpers/releases/download/v0.6.4/docker-credential-pass-v0.6.4-amd64.tar.gz \
                     ~/bin/docker-credential-pass.tgz

    pushd ~/bin &> /dev/null
      tar xf docker-credential-secretservice.tgz
      tar xf docker-credential-pass.tgz
      rm docker-credential-secretservice.tgz docker-credential-pass.tgz
    popd &> /dev/null

    # Seriously, they can't even get basic permissions right
    chmod 755 ~/bin/docker-credential-*

    echo "Both docker-credential-secretservice and docker-credential-pass were installed."
    echo "Docker will try docker-credential-pass is 'pass' is installed, else it will use"
    echo "docker-credential-secretservice (d-bus). To force docker-credential-secretservice,"
    echo "delete ~/bin/docker-credential-pass"
  fi

  source "${DOT_CORE_DIR}/external/vsi_common/linux/just_git_airgap_repo.bsh"
  pushd "${DOT_DIR}" &> /dev/null
    convert_git_remote_http_to_git > /dev/null
  popd &> /dev/null

  pushd "${DOT_CORE_DIR}" &> /dev/null
    convert_git_remote_http_to_git > /dev/null
  popd &> /dev/null

  if [ ! -e ~/.ssh/id_ed25519_gl ]; then
    ssh-keygen -f ~/.ssh/id_ed25519_gl -t ed25519
    validate_ssh_key ~/.ssh/id_ed25519_gl

    echo "Add this to gitlab"
    cat ~/.ssh/id_ed25519_gl.pub
  fi

  # if [ "${OS-}" = "Windows_NT" -a ! -f ~/bin/python310/python.exe ] || \
  #    [ ! -f ~/bin/python310/bin/python ]; then
  #   source "${DOT_CORE_DIR}/external/vsi_common/linux/just_files/just_install_functions.bsh"

  #   PYTHON_VERSION=3.10.0 conda-python-install --download --dir ~/bin/python310/
  # fi

  # source ~/bin/python310/python_just_activate.bsh

  # if [ ! -d ~/bin/aws.venv ]; then
  #   "${PYTHON_EXE}" -m venv ~/bin/aws.venv
  # fi

  # if [ "${OS-}" = "Windows_NT" ]; then
  #   AWS_VENV_BIN_DIR=~/bin/aws.venv/Scripts
  # else
  #   AWS_VENV_BIN_DIR=~/bin/aws.venv/bin
  # fi

  # if [ ! -f "${AWS_VENV_BIN_DIR}/aws" ]; then
  #   "${AWS_VENV_BIN_DIR}/pip" install aws
  # fi

  case "${DOT_OS}" in
    linux)
      if [ ! -f ~/bin/aws ]; then
        if command -v unzip &> /dev/null; then
          tempdir="$(mktemp -d)"
          download_to_file https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip "${tempdir}/awscli.zip"
          pushd "${tempdir}" &> /dev/null
            unzip awscli.zip
            ./aws/install -i ~/awscli -b ~/bin/
          popd
          rm -r "${tempdir}"
        else
          echo "unzip not installed, Skipping aws cli setup"
        fi
      fi
      ;;
    windows)
      if [ ! -f ~/awscli/aws.exe ]; then
        echo "Installing aws cli... (May take ~30 seconds)"
        MSYS2_ARG_CONV_EXCL="*" msiexec /i https://awscli.amazonaws.com/AWSCLIV2.msi /qn "AWSCLIV2=$(cygpath -w "${HOME}")\\awscli"
        # Does not work: Error loading Python DLL 'C:\Users\andy\bin\python39.dll'
        # symlink ~/awscli/aws.exe ~/bin/aws.exe
        # Not needed, as the installer adds itself to your PATH >:|
        # echo '#!/usr/bin/env bash' > ~/bin/aws
        # echo '~/awscli/aws.exe "${@}"' >> ~/bin/aws
      fi
      if [ ! -f ~/.python_readline/pyreadline3/__init__.py ]; then
        mkdir -p ~/.python_readline
        pushd ~/.python_readline
          curl -LO https://files.pythonhosted.org/packages/56/fc/a3c13ded7b3057680c8ae95a9b6cc83e63657c38e0005c400a5d018a33a7/pyreadline3-3.4.1-py3-none-any.whl
          unzip pyreadline3-3.4.1-py3-none-any.whl
          rm pyreadline3-3.4.1-py3-none-any.whl
        popd
        # This does not "apply" the change immediately to the next spawned
        # command prompt without rebooting or using a GUI to refresh it, setx does
        # powershell "Set-Itemproperty -Path HKCU:\Environment -Name PYTHONSTARTUP -Value $(cygpath -w ~/.pyrc)"
        setx PYTHONSTARTUP "$(cygpath -w ~/.pyrc)"
      fi
      ;;
    macos)
      if [ ! -f ~/awscli/aws ]; then
        download_to_file https://awscli.amazonaws.com/AWSCLIV2.pkg aws.pkg
        echo "<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">
<plist version=\"1.0\">
  <array>
    <dict>
      <key>choiceAttribute</key>
      <string>customLocation</string>
      <key>attributeSetting</key>
      <string>"~"</string>
      <key>choiceIdentifier</key>
      <string>default</string>
    </dict>
  </array>
</plist>" > aws.xml
        installer -pkg aws.pkg \
            -target ~/awscli \
            -applyChoiceChangesXML aws.xml
        rm aws.pkg aws.xml
        # Need symlink? Untested, I'm guessing no
      fi
      ;;
  esac

  expand_tilde ~/.gnupg/gpg-agent.conf.in ~/.gnupg/gpg-agent.conf
}

function unsetup()
{
  # if [ -L ~/.docker/config ]; then
  #   rm ~/.docker/config
  # fi

  #Todo: Make functions like add_if

  sed "${sed_flags_i[@]}" '/Include personal\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/Include openssh_8\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/Include windows\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/Include linux\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/path = ~\/\.personal\.gitconfig/d' ~/.gitconfig
  sed "${sed_flags_i[@]}" '/path = ~\/\.2\.11\.4\.gitconfig/d' ~/.gitconfig
  sed "${sed_flags_i[@]}" '/path = ~\/\.windows\.gitconfig/d' ~/.gitconfig
}
