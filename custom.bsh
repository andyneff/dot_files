#!/usr/bin/env false bash

REPO_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)"

source "${SCRIPT_DIR}/external/vsi_common/linux/web_tools.bsh"
source "${SCRIPT_DIR}/external/vsi_common/linux/requirements.bsh"
source "${SCRIPT_DIR}/external/vsi_common/linux/versions.bsh"
source "${SCRIPT_DIR}/external/vsi_common/linux/compat.bsh"

# Binary downloads
windows_downloads=(""
                   https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe)
linux_downloads=(https://www.vsi-ri.com/bin/deviceQuery
                 https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64)
macos_downloads=(""
                 https://github.com/stedolan/jq/releases/download/jq-1.6/jq-osx-amd64)
download_filesnames=(deviceQuery
                     jq)

function setup()
{
  # Bashrc
  add_if ~/.bashrc '\.personal\.bashrc' \
'if [ -r ~/.personal.bashrc ]; then
  . ~/.personal.bashrc
fi'

  # Bash_profile - Most OSes have this by default, macOS does not
  add_if ~/.bash_profile '~/.bashrc' \
'if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi'

  # ssh/config
  add_after_if ~/.ssh/config "Match all" "  Include personal.config"

  openssh_version
  if [ "${ssh_version[0]}" -ge "8" ]; then
    add_after_if ~/.ssh/config "Match all" "  Include openssh_8.config"
  fi

  if [ "${OS-}" = "Windows_NT" ]; then
    add_after_if ~/.ssh/config "Match all" "  Include windows.config"
  else
    add_after_if ~/.ssh/config "Match all" "  Include linux.config"
  fi

  # Special permissions
  chmod 600 ~/.ssh/config
  chmod 600 "${REPO_DIR}/files/.ssh/personal.config"
  chmod 600 "${REPO_DIR}/files/.ssh/openssh_8.config"
  chmod 600 "${REPO_DIR}/files/.ssh/windows.config"
  chmod 600 "${REPO_DIR}/files/.ssh/linux.config"

  # git/config
  add_after_if ~/.gitconfig "[include]" "  path = ~/.personal.gitconfig"

  if meet_requirements "$(git_version)" '>=2.11.4'; then
    add_after_if ~/.gitconfig "[include]" "  path = ~/.2.11.4.gitconfig"
  fi

  if [ "${OS-}" = "Windows_NT" ]; then
    add_after_if ~/.gitconfig "[include]" "  path = ~/.windows.gitconfig"
  fi

  # .docker/config
  if [ "${OS-}" = "Windows_NT" ]; then
    backup_and_replace ~/.docker/config_windows.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  elif [ -n "${WSL_DISTRO_NAME+set}" ]; then
    backup_and_replace ~/.docker/config_wsl.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  elif [[ ${OSTYPE-} = darwin* ]]; then
    backup_and_replace ~/.docker/config_macos.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  else
    backup_and_replace ~/.docker/config_linux.json ~/.docker/config.json "${DOT_BACKUP_DIR}/.docker/config"
  fi

  # Other
  local downloads=()
  local extention=''
  if [ "${OS-}" = "Windows_NT" ]; then
    downloads=(${windows_downloads[@]+"${windows_downloads[@]}"})
    extention='.exe'
  elif [[ ${OSTYPE-} = darwin* ]]; then
    downloads=(${macos_downloads[@]+"${macos_downloads[@]}"})
  else
    local THIS_OS=linux
    downloads=(${linux_downloads[@]+"${linux_downloads[@]}"})
  fi

  local index
  for index in "${!downloads[@]}"; do
    if [ -n "${downloads[index]}" ] && [ ! -x ~/bin/"${download_filesnames[index]}${extention}" ]; then
      download_to_file "${downloads[index]}" ~/bin/"${download_filesnames[index]}${extention}"
      chmod 755 ~/bin/"${download_filesnames[index]}${extention}"
    fi
  done

  if [ "${THIS_OS-}" = "linux" ] && [ ! -e ~/bin/docker-credential-secretservice ] && [ ! -e ~/bin/docker-credential-pass ]; then
    # Run level 3 is headless, no graphics. The simple existance of this executable will affect how docker login works
    # By default, Docker looks for the native binary on each of the platforms, i.e.
    # "osxkeychain" on macOS, "wincred" on windows, and "pass" on Linux. A special
    # case is that on Linux, Docker will fall back to the "secretservice" binary if
    # it cannot find the "pass" binary. If none of these binaries are present, it
    # stores the credentials (i.e. password) in base64 encoding in the config files
    # described above.
    if [[ "$(runlevel)" =~ 5 ]]; then
      download_to_file https://github.com/docker/docker-credential-helpers/releases/download/v0.6.4/docker-credential-secretservice-v0.6.4-amd64.tar.gz ~/bin/dch.tgz
    else
      download_to_file https://github.com/docker/docker-credential-helpers/releases/download/v0.6.4/docker-credential-pass-v0.6.4-amd64.tar.gz ~/bin/dch.tgz
    fi
    pushd ~/bin &> /dev/null
      tar xf dch.tgz
      rm dch.tgz
    popd &> /dev/null

    # Seriously, they can't even get basic permissions right
    chmod 755 ~/bin/docker-credential-*
  fi

  source "${SCRIPT_DIR}/external/vsi_common/linux/just_git_airgap_repo.bsh"
  pushd "${DOT_DIR}" &> /dev/null
    convert_git_remote_http_to_git > /dev/null
  popd &> /dev/null

  pushd "${SCRIPT_DIR}" &> /dev/null
    convert_git_remote_http_to_git > /dev/null
  popd &> /dev/null

  if [ ! -e ~/.ssh/id_ed25519_bb ]; then
    ssh-keygen -f ~/.ssh/id_ed25519_bb -t ed25519
    validate_ssh_key ~/.ssh/id_ed25519_bb

    echo "Add this to bitbuket"
    cat ~/.ssh/id_ed25519_bb.pub
  fi
}

function unsetup()
{
  if [ -L ~/.docker/config ]; then
    rm ~/.docker/config
  fi

  sed "${sed_flags_i[@]}" '/Include personal\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/Include openssh_8\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/Include windows\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/Include linux\.config/d' ~/.ssh/config
  sed "${sed_flags_i[@]}" '/path = ~\/\.personal\.gitconfig/d' ~/.gitconfig
  sed "${sed_flags_i[@]}" '/path = ~\/\.2\.11\.4\.gitconfig/d' ~/.gitconfig
  sed "${sed_flags_i[@]}" '/path = ~\/\.windows\.gitconfig/d' ~/.gitconfig
}
