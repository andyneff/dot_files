[user]
	name = Andy Neff
	email = andy@visionsystemsinc.com
[push]
	default = current

# config --name-only			2.6.0
# diff.submodule = diff		2.11.4

[aliashelp]
	aliases = "List aliases and help"
	config-name-only = "A backwards compatible way to handle --name-only on git versions earlier than 2.6. Note: Literal newlines in config values \"\\\\n\" will result in extra lines in older versions of git"
	st = "Scott status"
	l = "Andy log"
	l2 = "Andy log that shows all branchs that are attached to the currenty HEAD. It's like --all without orphaned trees"
	# pushall = "Push to all remotes (not used anymore)"
	# fetchall = "Fetch from all remotes (not used anymore)"
	# branches = "List branches in current module and all submodules (not used anymore)"
	# comaster = "Checkout master on all submodules (not used anymore)"
	statuses = "Runs status in current module and all submodules (not used anymore)"
	sstatus = "Git status with submodule information"
	ci = "Commit interactive"
	ai = "Add interactive"
	unadd = "Unstage a file. \\x1b[33mUsage\\x1b[0m: git unadd <filename>"
	blameline = "Follow a line over history. \\x1b[33mUsage\\x1b[0m: git blameline <startline>,<endline+1>:<filename>"
	versions = "Show the history as a list of shas"
	lhist = "One line tree log"
	# lpatch = "lhist, with diff patches"
	lfile = "lhist with files listed"
	logitall = "Andy log, listing all history, including deleted branches"
	vdiff = "Open up visual diff tool"
	diffss = "Git diff with submodules set to short"
	pretendchanged = "Mark a file as changed, even if it isn't. \\x1b[33mUsage\\x1b[0m: git pretendchanged <filename>"
	pretendunchanged = "Mark a file as not changed, even if it is. \\x1b[33mUsage\\x1b[0m: git pretendunchanged <filename>"
	cat = "Show the contents of a file from specific commit. \\x1b[33mUsage\\x1b[0m: git cat <ref> <filename>"
	newest-ancestor = "Finds the most recent commit that is common between two refs. \\x1b[33mUsage\\x1b[0m: git newest-ancestor <ref> <ref>"
	oldest-ancestor = "Finds the oldest commit that is common between two refs. \\x1b[33mUsage\\x1b[0m: git newest-ancestor <ref> <ref>. \n\
                  For example, B is the oldest between D and G (https://stackoverflow.com/q/1527234):\n\
                    A--B--C--D\n\
                        \\  \\\n\
                         E--F--G"
	dangling-commits = "Find all commits not in any branches. Useful for finding a commit after you accidentally delete the branch or drop a stash"
	ignore = "Locally, ignore a file in this local clone (uses info/exclude). \\x1b[33mUsage\\x1b[0m: git ignore <filename>"
	unignore = "Locally, unignore a file in this local clone (uses info/exclude). \\x1b[33mUsage\\x1b[0m: git unignore <filename>"
	all-children = "??"
	detach = "Detach the HEAD"
	branch-merged = "List all already merged branches"
	branch-unmerged = "List all unmerged branches where I'm the author of the last commit"
	apply-gitattributes = "Recursively force applies gitattributes"
	apply-permissions = "Recursively force applies the execute permission flag to files"
	check-submodules = "Print the list of commits different in the submodules between the current diff. \"Rewind\" means that submodule is behind, and needs updating"
	update = "Fetches and update the ref of a you do not currently have checkedout branch, auto determining the remote name. \\x1b[33mUsage\\x1b[0m: git update <branch>"
	reflist = "List all names references"
	cherry-contains = "Prints each local branch containing an equivalent commit. \\x1b[33mUsage\\x1b[0m: git cherry-contains <commit> [refs]"
	delete-remote-branch = "\\x1b[33mUsage\\x1b[0m: git delete-remote-branch <remote> <branch>"
	fixup = "Git commit --amend, for commits other than the latest. \\x1b[33mUsage\\x1b[0m: git fixup <commit>. See: https://blog.filippo.io/git-fixup-amending-an-older-commit/"
	fixitup = "Alternate fixup ??"
	unpushed = "List branches not push on any remote: \\x1b[33mUsage\\x1b[0m: git unpushed [branch] "
	ls-ignored = "List ignored files in the current repo"
	mfa = "Trigger 2fa on gitlab server"
[alias]
	aliases = "!for x in $(git config-name-only --get-regex alias | sed -n 's|^alias\\.||p'); do echo -e \"${x} - $(git config --get aliashelp.${x} || echo \\?\\?)\"; done"
	# config-name-only can have extra lines if newlines are in the alias, such as check-submodules, so sed to filter those out, and remove .alias
	config-name-only = "!bash -c '. ~/.dot/external/dot_core/external/vsi_common/linux/versions.bsh; if meet_requirements \"$(git_version)\" \"<2.6\"; then git config \"${@}\" | awk \"{print \\$1}\"; else git config --name-only \"${@}\"; fi' --"
	st1 = !git -c color.status=always status -s | while IFS='' read line\\\\; do IFS=' ' blah=($line); echo $(stat -c %z ${blah[1]}) ${line}; IFS='';" done | sort | cut -c 37-
	st = !git -c color.status=always status -s | "while IFS='' read line; do IFS=' ' blah=($line); echo \"$(stat -c %z ${blah[1]}) ${line}\"; IFS=''; done" | sort | cut -c 37-
	l = log --decorate --graph
	l2 = !"git log --decorate --graph $(git branch --color=never -a --contains $(git rev-list HEAD | tail -n1) | sed '/ detached at /d; s|^..||; s| -> .*||')"
	# pushall = !git remote | xargs -L1 -I{} git push {}
	# fetchall = fetch --all
	# branches = !git branch && git submodule foreach git branch
	# comaster = submodule foreach git checkout master
	statuses = !git status \"${@}\" && git submodule foreach git status
	sstatus = -c status.submodulesummary=1 status
	# commits = !git submodule foreach ~/.git_commits \"${@}\" && git commit -a
	# reattach = submodule foreach git checkout master
	ci = commit --interactive
	ai = add --interactive
	unadd = reset HEAD
	blameline = log --follow -L
	versions = log --pretty=format:%H
	lhist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	# lpatch = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short --patch
	lfile = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short --stat
	# lhist version of my "l --patch" with submodule=log, which I like my diff
	# logsubmodule = "!f() { git log --pretty=format:$'%C(yellow)%h%C(reset) %ad | %s%C(auto)%d %C(cyan)[%an]' --date=short --patch --color=always --submodule=log ${1} | grep -v $'\\x1b\\[3[12]m  [<>]' | less -R; }; f"
	logitall = !git log --graph --decorate --all $(git reflog show --format=%H)
	vdiff = difftool
	diffss = diff --submodule=short
	pretendchanged = update-index --no-assume-unchanged
	pretendunchanged = update-index --assume-unchanged
	cat = !git show $1:"$2"
	newest-ancestor = merge-base
	oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
	dangling-commits = !git show $(git fsck --lost-found | grep '^dangling commit' | awk '{print $3}')
	# bb = repo bb
	ignore = ! echo >> "$(git rev-parse --git-path info/exclude)"
	unignore = "!f(){ sed -i ${OSTYPE:+""} '/^'\"${1}\"'$/d' \"$(git rev-parse --git-path info/exclude)\"; };f"
	#unignore = "!f(){ python -c s=__import__\\(\\'sys\\'\\)\\;print\\(s.argv\\) sed -i '/^'\"${1}\"'$/d' \"$(git rev-parse --git-path info/exclude)\"; };f"

	# #For example, To move branch master to sha a3423b3, git move-branch master a3423b3
	# move-branch = "!git fetch -f $(pwd) $2:$1"
	# git branch -m does this?

	all-children = "!git rev-list --children $(git reflog --pretty=%H) | grep ^$(git rev-list -n 1 ${1-HEAD}) | cut -d' ' -f2-"
	detach = "!git checkout `git rev-parse HEAD`"
	branch-merged = branch --merged HEAD
	branch-unmerged = "!git branch --color=never -a -q --no-merged HEAD | sed 's| -> .*||' | xargs -L1 git --no-pager show -s --oneline --author='Neff'"
	apply-gitattributes = !git checkout-index --force-all && git submodule foreach --recursive git checkout-index --force-all
	apply-permissions = !git diff -p -R --no-color --submodule=diff | grep -E "^(diff|(old|new) mode)" --color=never | git apply
	# This should actually read IFS=$'\\n', but I'm not fixing it, because it adds a literal newline in the alias, and makes sure other things tolerate it
	check-submodules = !"IFS=$'\n'; for x in $(git config --name-only --file .gitmodules --get-regexp '^submodule\\..*\\.path$'); do git diff --submodule=log \"$(git config --file .gitmodules --get \"${x}\")\"; done"
	update = "!remote=$(git rev-parse --abbrev-ref $1@{upstream}); remote_branch=${remote#*/}; remote=${remote%%/*}; git fetch ${remote} ${remote_branch}:${1}; :"
	reflist = "for-each-ref --format='%(refname)'"
	cherry-contains = "!f(){ local sha=\"$(git rev-parse --verify \"${1}\")\" || return 1; local refs=\"${2:-refs/heads/}\"; local branch; git for-each-ref --format='%(refname:short)' $refs | while IFS= read -r branch; do if ! git cherry \"${branch}\" \"${sha}\" \"${sha}^\" | grep -qE \"^\\+ ${sha}\"; then echo \"${branch}\"; fi; done; };f"
	delete-remote-branch = "!f(){ set -u; git push \"${1}\" --delete \"${2}\"; }; f"

	fixup = "!f() \
		{ : git commit ; \
			local TARGET=$(git rev-parse \"${1}\") && \
			git commit --fixup=${TARGET} \"${@:2}\" && \
			EDITOR=true git rebase -i --autostash --autosquash ${TARGET}^ || echo ABORTED you might want to run: git reset --soft HEAD~1; \
		}; f"
	fixitup = "!f() { git rebase -i --autostash --autosquash --rebase-merges \"$(git merge-base --octopus $(git unpushed HEAD))\"^; }; f"
	unpushed = "!f() { git log ${1---branches} --format=%H --not --remotes; }; f"
	ls-ignored = "ls-files -io --exclude-standard"
	mfa = ! ssh git@gitlab.vsi-ri.com 2fa_verify
[http]
	sslVerify = true
[color]
	ui = always
# [http "https://vsi-ri.com"]
# 	sslVerify = true
# 	sslCAInfo = /home/andy/.ssh/vsi-ca.crt
[credential]
	helper = cache --timeout=3600
[core]
	editor = ~/bin/git_edit
  excludesFile = ~/.gitignore
[diff]
	tool = meld
# [status]
# 	submoduleSummary = true
[difftool]
	prompt = false
[merge]
	tool = andy
#	tool=kdiff3
[mergetool]
	prompt = false
	keepBackup = false
	keepTemporaries = false
[mergetool.andy]
	cmd = mitm_kdiff3 "$LOCAL" "$REMOTE" "$MERGED" "$BASE"
[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[log]
	follow = true
[init]
	defaultBranch = main
